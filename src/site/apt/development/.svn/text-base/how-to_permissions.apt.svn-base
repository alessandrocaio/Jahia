How-to create your custom permissions

 Permissions and roles are imported on the deployment of your module by Jahia, roles and permissions are unique in the system (for permissions only the name matters, the path is just a logical way for grouping/organizing permissions).

 If a user as a high level permission on a node (permission with sub permission) it means he have all those sub permissions, so in your case you always need to only test on a permission, Jahia is responsible of doing all the tree resolution for you.

 To create/use new permission it take only 3 steps :

    * First add a  custom permission in your module, to achieve that create a permissions.xml file in your module import folder :

+-------------------------
<?xml version="1.0" encoding="UTF-8"?>
<permissions jcr:primaryType="jnt:permission"
        xmlns:jcr="http://www.jcp.org/jcr/1.0"
        xmlns:j="http://www.jahia.org/jahia/1.0"
        xmlns:jnt="http://www.jahia.org/jahia/nt/1.0">
    <actions jcr:primaryType="jnt:permission">
        <myCustomModule jcr:primaryType="jnt:permission">
            <myCustomPermission jcr:primaryType="jnt:permission"/>
        </myCustomModule>
    </actions>
</permissions>
+--------------------------

    Deploy your module, Jahia will add this permission in the repository (can be seen using the role manager in the administration in Enterprise Jahia, or through the repository explorer in the Community Jahia)

    * Then add this permission to an existing role (if needed), this way users having this roles will have your permission automatically :

+-----------------------
<?xml version="1.0" encoding="UTF-8"?>
<roles jcr:primaryType="jnt:roles"
       xmlns:jcr="http://www.jcp.org/jcr/1.0"
       xmlns:j="http://www.jahia.org/jahia/1.0"
       xmlns:jnt="http://www.jahia.org/jahia/nt/1.0">
    <editor jcr:primaryType="jnt:role"
             j:permissions="/permissions/actions/myCustomModule/myCustomPermission"/>
</roles>
+--------------------------

    Please note how the "j:permissions" need the full path of the permissions even if after that you will use only the name of the permission itself

    *  Now we can test against this permission in our JSP files or using the API directly:

        * In a JSP file :

+---------------------
<c:if test="${jcr:hasPermission(currentNode,'myCustomPermission')}">
    <!--The user is allowed-->
    <!-- Do something specific for this user -->
</c:if>
+----------------------

        * In an Action class for example :

+---------------------
public ActionResult doExecute(HttpServletRequest req, RenderContext renderContext, Resource resource, JCRSessionWrapper session,
                              Map<String, List<String>> parameters, URLResolver urlResolver)
            throws Exception {
|
|
    if(resource.getNode().hasPermission("myCustomPermission")){
        // Do something specific in this case
    }
|
|
}
+---------------------
