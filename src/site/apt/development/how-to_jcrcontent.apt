How-to manipulate my content using the JCR API in Jahia 6.6

 First things to understand is that in the JCR everything happens in the context of a session
(think something like an hibernate session for those of you that familiar with this framework).
In the context of this session I can create/read/update/delete any content my session can access to.

 A session is open by one user, on one workspace, in one language. This means that at anytime in the context of my session
I can only access content allowed to this user, that exist in this workspace (default or live in Jahia 6.6) in this particular
language (if no language is provided you can only read non internationalized properties) but you can still access the nodes.

 So whenever you want to interact with the JCR first of all get a session.

 If you are in an Action then you receive this session as a parameter :

+------------------------
public ActionResult doExecute(HttpServletRequest req, RenderContext renderContext, Resource resource, JCRSessionWrapper session,
                              Map<String, List<String>> parameters, URLResolver urlResolver)
+------------------------

 Otherwise if you do not get the session directly, you can get it from a node  (node.getSesion()).

 Another way of getting a session if you develop some services is to make SPRING inject the JCRTemplate class in your service.

 Once you have a session you can manipulate your content. Remember that when creating a node, you need to first read its parent,
then add the new node under this parent, set the properties on this child and then save the session.

 Every time you change a node/property remember to save the session before ending your process.

 An example of code using the JCRTemplate (this one is injected by SPRING)

+------------------------------------
private JCRTemplate jcrTemplate;
public void setJcrTemplate(JCRTemplate jcrTemplate) {
        this.jcrTemplate = jcrTemplate;
}

public void doSomething() {
    jcrTemplate.doExecuteWithSystemSession(null,Constants.EDIT_WORKSPACE, Locale.ENGLISH,new JCRCallback() {
        public Object doInJCR(JCRSessionWrapper session) throws RepositoryException {
            JCRNodeWrapper node = session.getNode("/sites/mySite/contents/news");
            String nodeTitle = "My node"
            JCRNodeWrapper jcrNodeWrapper = node.addNode(nodeTitle, "jnt:news");
            jcrNodeWrapper.setProperty("jcr:title", nodeTitle);
            jcrNodeWrapper.setProperty("desc", "my node content");
            session.save();
            return null;
        }
    });
}
+------------------------

  <<<jcrTemplate.doExecuteWithSystemSession(null,Constants.EDIT_WORKSPACE, Locale.ENGLISH,new JCRCallback() \{>>>

  This line indicate that we want to execute a certain callback using a system session (no user in particular,  but JCRTemplate allows to use any type of session), in the EDIT_WORKSPACE and in English.

  <<<JCRNodeWrapper node = session.getNode("/sites/mySite/contents/news");>>>

  This read what will be our root node for this process.

  <<<JCRNodeWrapper jcrNodeWrapper = node.addNode(nodeTitle, "jnt:news");>>>

  We add a node under our root node, this node will be of type "jnt:news". As long as we do not save our session this node only exist in our context, nobody knows about it. This create an empty shell for our node, now we have to set some properties on it. This is done by calling setProperty methods on our newly created node.

  <<<session.save();>>>

  This save the session and propagate our node to the JCR definitively where it can be read by others from now on.

 To create a node call the add method on its parent, so the steps are :

    * Open the session
    
    * Get the parent node
    
    * Call the add method on the parent (do not forget to specify your nodetype)
    
    * Call setProperty on each properties we want to add on our new node
    
    * Save the session


 To delete a node call the remove method on this node, so the steps are :

    * Open the session
    
    * Get the node we want to delete
    
    * Call remove method on it
    
    * Save the session

 To Update a property on an existing node :

    * Open the session
    
    * Get the node we want to update
    
    * Call setProperty on each properties we want to update
    
    * Save the session
