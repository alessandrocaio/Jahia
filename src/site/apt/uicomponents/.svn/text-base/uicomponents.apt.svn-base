Core module - UiComponents framework

  UiComponents framework allows integrators to customize a part of the Edit mode and Content managers.

* Content manager

  The content manager is divided in four parts:

    - toobars: panel that allows to trigger an action on the selected node  as "Edit", "Delete", "Create folder", ..

    - rigth panel: panel that is composed by several repository. Each repository is represent by a navigation tree.

    - left panel: panel that displays sub-nodes of the selected node in a grid composed by several columns

    - bottom panel: panel that is composed by several tab. Each tab displays useful informations about the selected node in the left panel

[../images/uicomponents/contentmanager.png]

  Within this spring configuration file, /WEB-INF/ect/spring/uicomponents/applicationcontext-contentmanager.xml,Jahia allows you to customize different aspects of the content manager as:

    * the actions that can be triggered in the toolbar

    * the displayed repositories in the rigth panel

    * the displayed columns in the left panel

    * the displayed tab in the bottom panel

    * ...

  As an example, here is how the configuration of the file manager has beean created:

    [[1]] create a bean that extends  org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration and with id "filemanager"

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
   </bean>
+-------------------------------------------

    [[2]] set some simple properties


+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
        <property name="nodeTypes" value="nt:file,nt:folder,jnt:mountPoint,jnt:portlet"/>
        <property name="folderTypes" value="nt:folder,jnt:mountPoint"/>
        <property name="toolbarSet" ref="document-manager"/>
        <property name="enableTextMenu" value="true"/>
        <property name="displayProvider" value="true"/>
        <property name="displaySearchInPage" value="false"/>
        <property name="displaySearchInContent" value="false"/>
        <property name="displaySearchInFile" value="false"/>
        <property name="displaySearchInTag" value="true"/>
   </bean>
+-------------------------------------------

    [[3]] set the list of the displayed repositories of the rigth panel

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
       ...
       <!-- accordion panels-->
        <property name="tableColumns">
            <list>
                <ref bean="column.providerKey"/>
                <ref bean="column.ext"/>
                <ref bean="column.name"/>
                <ref bean="column.locked"/>
                <ref bean="column.path"/>
                <ref bean="column.size"/>
                <ref bean="column.lastModified"/>
            </list>
        </property>
       ...
   </bean>
+-------------------------------------------

    [[4]] set the list of the displayed columns of the left panel

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
      ...
      <!-- tabs -->
        <property name="tabs">
            <list>
                <ref bean="tab.info"/>
                <ref bean="tab.authorizations"/>
                <ref bean="tab.usage"/>
                <ref bean="tab.versioning"/>
            </list>
        </property>
      ...
   </bean>
+-------------------------------------------

    [[5]] set the list of the displayed tab info of the bottom panel

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
      ...
      <!-- tabs -->
        <property name="tabs">
            <list>
                <ref bean="tab.info"/>
                <ref bean="tab.authorizations"/>
                <ref bean="tab.usage"/>
                <ref bean="tab.versioning"/>
            </list>
        </property>
      ...
   </bean>
+-------------------------------------------

    [[6]] set the visibility rule if nested

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
        ...
        <property name="visibility">
            <bean class="org.jahia.services.uicomponents.bean.Visibility">
                <property name="permission" value="contentmanager/filemanager"/>
            </bean>
        </property>
        ...
   </bean>
+-------------------------------------------

    [[7]] set the toolbars (see applicationcontext-toolbar.xml for toolbar set beans)

+-------------------------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
      ...
      <property name="toolbarSet" ref="document-manager"/>
      ...
   </bean>
+-------------------------------------------

    At the end, the configuration of the file manager is:

+-------------------------------------------
 <!-- file manager -->
    <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
        <property name="nodeTypes" value="nt:file,nt:folder,jnt:mountPoint,jnt:portlet"/>
        <property name="folderTypes" value="nt:folder,jnt:mountPoint"/>
        <property name="toolbarSet" ref="document-manager"/>
        <property name="enableTextMenu" value="true"/>
        <property name="displayProvider" value="true"/>
        <property name="displaySearchInPage" value="false"/>
        <property name="displaySearchInContent" value="false"/>
        <property name="displaySearchInFile" value="false"/>
        <property name="displaySearchInTag" value="true"/>
        <!-- accordion panels-->
        <property name="accordionPanels">
            <list>
                <ref bean="repository.website"/>
                <ref bean="repository.shared"/>
                <ref bean="repository.myexternal"/>
                <ref bean="repository.my"/>
                <ref bean="repository.users"/>
            </list>
        </property>
        <!-- tabs -->
        <property name="tabs">
            <list>
                <ref bean="tab.info"/>
                <ref bean="tab.authorizations"/>
                <ref bean="tab.usage"/>
                <ref bean="tab.versioning"/>
            </list>
        </property>
        <!-- table columns-->
        <property name="tableColumns">
            <list>
                <ref bean="column.providerKey"/>
                <ref bean="column.ext"/>
                <ref bean="column.name"/>
                <ref bean="column.locked"/>
                <ref bean="column.path"/>
                <ref bean="column.size"/>
                <ref bean="column.lastModified"/>
            </list>
        </property>
        <property name="visibility">
            <bean class="org.jahia.services.uicomponents.bean.Visibility">
                <property name="permission" value="contentmanager/filemanager"/>
            </bean>
        </property>
    </bean>    
+-------------------------------------------


* Edit Mode

  The Edit mode is composed by several parts:

     - toobar: a panel that is composed by a set of buttons. Each button allows to trigger an action on the selected node  as "Edit", "Delete" , "Create Content" , "Create page" ...

     - side panel, usually called the "Selector": a panel that is composed by several tabs from witch you can drag and drop content, view the site map, ....

     - create engine: a wizard that allows to create new content from definition. Actually the is two different types: create page and create content

     - edit engines: window that is composed by different part tab. Each tab displays a set of properties such as fields, acl, options, ....
    

[../images/uicomponents/editmode.png]


  Within this spring configuration file , /WEB-INF/ect/spring/uicomponents/applicationcontext-editmode.xml ,Jahia allows you to customize different aspects of the edit mode as:

    - the action that can be triggered in the toolbar

    - the displayed tabs in side panel

    - ...

   As an example, here is how the configuration of the default edit mode manager has been created:

    [[1]] create an edit mode configuration bean

+----------------
    <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">

    </bean>
+----------------

    [[2]] set the toolbars

+----------------------
    <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">
        <property name="topToolbar" ref="editmode-topbar"/>
        <property name="contextMenu" ref="editmode-contextmenu"/>
    </bean>
+----------------------

    [[3]] set the create engine for pages and contents

+------------------
   <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">
        ...
        <!-- create engine-->
        <property name="createEngines">
            <list>
                <ref bean="engine.edit.createpage"/>
                <ref bean="engine.edit.createcontent"/>
            </list>
        </property>
        ...
    </bean>
+------------------

    [[4]] set the edit engine for pages and contents (in this case it's the same)

+---------------------

   <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">
        ...
        <!-- edit engine -->
        <property name="editEngines">
            <list>
                <ref bean="engine.edit.editcontent"/>
            </list>
        </property>
        ...
    </bean>

+----------------------

    [[5]] set the tabs on the side panel

+-------------------------

    <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">
        ...
        <!-- tabs -->
        <property name="tabs">
            <list>
                <ref bean="sidePanelTab.pages"/>
                <ref bean="sidePanelTab.createContent"/>
                <ref bean="sidePanelTab.content"/>
                <ref bean="sidePanelTab.images"/>
                <ref bean="sidePanelTab.files"/>
                <ref bean="sidePanelTab.portlets"/>
                <ref bean="sidePanelTab.search"/>
                <ref bean="sidePanelTab.workflow"/>
            </list>
        </property>
        ...
    </bean>

+-------------------------

    Finally, the configuration bean for the edit mode is:

+--------------------------------
  <bean id="editmode" class="org.jahia.services.uicomponents.bean.editmode.EditConfiguration">
        <property name="topToolbar" ref="editmode-topbar"/>
        <property name="contextMenu" ref="editmode-contextmenu"/>

        <!-- edit engine -->
        <property name="editEngines">
            <list>
                <ref bean="engine.edit.editcontent"/>
            </list>
        </property>

        <!-- create engine-->
        <property name="createEngines">
            <list>
                <ref bean="engine.edit.createpage"/>
                <ref bean="engine.edit.createcontent"/>
            </list>
        </property>

        <!-- tabs -->
        <property name="tabs">
            <list>
                <ref bean="sidePanelTab.pages"/>
                <ref bean="sidePanelTab.createContent"/>
                <ref bean="sidePanelTab.content"/>
                <ref bean="sidePanelTab.images"/>
                <ref bean="sidePanelTab.files"/>
                <ref bean="sidePanelTab.portlets"/>
                <ref bean="sidePanelTab.search"/>
                <ref bean="sidePanelTab.workflow"/>
            </list>
        </property>
    </bean>

+--------------------------------


* How to set visibility rules such as "nested permissions" on a specific part of the content manager and the edit mode?

  Each part of the content managers and edit mode has a optional properties called "visibility". Basically, it allows you to define the conditions under witch th element is visible for the current user.

  Example 1:

+--------------------------
   <bean id="filemanager" class="org.jahia.services.uicomponents.bean.contentmanager.ManagerConfiguration">
        ...
        <property name="visibility">
            <bean class="org.jahia.services.uicomponents.bean.Visibility">
                <property name="permission" value="contentmanager/filemanager"/>
            </bean>
        </property>
        ...
   </bean>
+---------------------------

   means that the filemanager is visible only for users who have the site permission "filemanagers" of the group "contentmanager".


   Example 2:

+-------------------------
    <bean id="repository.website" class="org.jahia.services.uicomponents.bean.contentmanager.Item">
        <property name="key" value="websiteRepository"/>
        <property name="visibility">
            <bean class="org.jahia.services.uicomponents.bean.Visibility">
                <property name="permission" value="contentmanager/website"/>
            </bean>
        </property>
    </bean>
+-------------------------

   means that the repository "website" is visible only for users who have the site permission "website" of the group "contentmanager"


   The bean "visibility" is defined by the following properties:
     - permission: allows to define the site permissions that the user must have
     - serverActionPermission: allows to define the server permissions that the user must have
     - needAuthentication: allows to define if the user must be authenticated or not
     - userAgent: allows to define the userAgent (ie, mozilla, ....)
     - value: allows to define the value (true false)


   Thanks to this mechanism, you can customise the visibility of any part of the content managers and the edit mode.

