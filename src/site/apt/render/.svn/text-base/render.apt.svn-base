Rendering


* Components rendering and views

 Every component can be rendered by using a view. A view is a script, usually a JSP file.

** Using the module tag

 The module tag allows to render other components. The path or the node need to be passed.


* Templates

 A node needs to be associated to a template to be displayed in a full HTML page. A template will define which element
 to display and where to display them, gathering difference component views in one single HTML page.ca ser

 Templates are created with the Studio. <Page templates> are specially created for pages, and <Content templates> are
 created for all other type of content. The content templates are associated to a node type.

 It's possible to limit templates to some users based on permissions. For example, templates showing some private area
 or allowing to edit the content can be hidden for normal users.

** Selecting a template

 A node can be associated to a template - this is the case for all page nodes. A template must be specified at
 creation time. The template is set in the property <<<j:templateNode>>>, defined by the mixin type
 <<<jmix:hasTemplateNode>>>

 The user can also force to choice of a template by specifiying in the url the name of the template, before the .html
 extension. For example,

+----------
http://localhost:8080/cms/render/default/en/sites/ACME/home/news/maincontent/news_36.content-template.html
+----------

 will use the template named <content-template> to display the node news_36.

** Default template and priority

 Default template are used automatically if no specific template has been requested by the user, and if no template is
 associated to a node. As multiple templates can be used for one single node, and only one need to be selected, a
 priority can be defined. The template with the highest priority will be selected

 If no template is specified in the URL, no template associated to the node and no default template can be found, the
 node cannot be displayed and the system will throw a 404 error.

** Templates sequence

 A template must either have an associated view, or must be contained inside another template. If a view is defined, it
 will be called to render the template. If not, the parent template will be called instead. This allows to cascade
 templates, from the most specific template to more global templates, defining standard headers and footers. The
 top-level template, defining all common areas, is usually called the <base> template.

[../images/render/cascade.png]

 The template sequencem that will be used for the rendering, is then defined as :

 * the template view

 * the base template

 * the home template

 * the home page

** Calling content from a template

 Building a page is a matter of aggregating the template and the requested node. This node is called the
 <<main resource>>, it's the one that we can find in the URL, and which contains the information to be displayed.

 When a page need to be built, Jahia will look for the template node. The template node will defined the layout, and
 which information will be displayed from the main resource.

 To use content from the main resource, some components are available in the studio.

*** Area

 Areas can be defined in the JSP views, with template:area tags, or in the templates, with the area component.
 The goal of an area is to display content coming from a node next in the templates sequence. An area is said to
 be enabled under one node if the list named like the area is present under that node. For example, an area
 <<<maincontent>>> defined in the template view is enabled in the main resource if the list <<<maincontent>>> is
 created under the main resource.

 Area are represented as blue blocks in the studio.

 For example, let's use the same the same templates sequence as before - template view, base template, home template and
 home page.

[../images/render/areas.png]

 * The template view defines 2 area tags, <header> and <pagecontent>.

 * Both of them are enabled in the base template as list, the header list containing one content <head content>,
 the <pagecontent> list containing 2 area nodes, <areaA> and <pagecontent>.

 * The home template enables the <areaA>, containing one content <content1>.

 * The home page enables the <pagecontent> area, container one content <content2>

*** Absolute area

 Absolute area are similar to area, but do not use the templates sequence to resolve the list to display - they use an ancestor
 of the main resource instead. A level of ancestor can be specified - 0 is for the home page level, 1 for the first
 sub pages level, etc.. If no level is specified, the content list will be taken from the home page of the site.

 Absolute areas are represented as red blocks in the studio.

*** Main resource display

 This component will call a specific view on the main resource node directly. It can be used in content templates only.
 It's represented in the studio as a grey area.
 It is used to gather in one complex templates different views of the same node - for example, in the wiki
 <wiki-content> template, we can find multiple main resource display components. Here in the history tab, the history
 and the compare views are displayed one on top of the other :

[../images/render/wiki-content.png]

** Example of rendering sequence

[../images/render/area-display.png]

 [[1]]- The user request a page

 [[2]] The system first tries to resolve the template. It finds a template <home> associated to the page.

 [[3]] The <home> template is contained inside the <base> template. The system will first render the <base> template

 [[4]] <base> template is associated to a view - the file <<<template.myset.jsp>>> - the JSP is called to start building
  the page.

 [[5]] An area <header> is found - the system will look sequentially in <base>, <home>, and finally in the <page> to find
  a list named <header>. This list is found in the <base> template, and contains a navigation menu. All nodes here are
  rendered using their own views.

 [[6]] Another area <pagecontent> is found. This one does not exist in <base>, but is present in <home>. The system will
  start the rendering of home/pagecontent .

 [[7]] First node found is a <<<jnt:row>>> node. The node is rendered using its own view, <<<row.jsp>>>.

 [[8]] The JSP contains a first area, <row-col1>. The system finds the area in <home> - which contains itself an area node
  named <areaA>.

 [[9]] The template areaA is found in the <page>. Content of page/areaA is rendered.

 [[10]] The rendering of <row-col1> is over, another area is definied in the <<<row.jsp>>> file : <row-col2>. row-col2 is
  found in <home>, which contains an area

 [[11]] Again, the areaB is found in the <page>. Content of page/areaB is rendered.

 The view <<<row.jsp>>> is fully rendered. As home/pagecontent does not contain any other node, the home/pagecontent area
 rendering is finished. The view <<<template.myset.jsp>>> finishes its execution. The page is fully rendered.

 []

