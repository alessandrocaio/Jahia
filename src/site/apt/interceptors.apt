Core Module - Property interceptors

  Property interceptor catches all accesses to JCR node properties. They may execute an action when a property is stored in
  the JCR and when it is read from the JCR. It is also possible to make the property set fails if some checks fail.

  Interceptors can transform the value before the storage into the JCR and/or after the property is read.

  They are system-wide and can be filtered base on the parent node and the property definition.
  
  Several examples of usage for an interceptor are:
  
  * Advanced filtering of text e.g. for automatic moderation of blog or forum posts
  
  * Auto-tagging and semantic text extraction
  
  * Custom URL rewriting in text properties
  
  []  

* Interceptor mechanism

  By default, interceptors are executed for every get and set operation on a property - but they can be disabled for a
  specific session. Currently interceptors are disabled when an unlocalized session is used.

  When setting a property, the <<<InterceptorChain.beforeSetValue()>>> method is called before setting the value to the JCR.
  The chain will iterate on all declared interceptors, check if an interceptor needs to be called on the property, and
  will call the <<<PropertyInterceptor.beforeSetValue()>>>. The interceptor must return the property value, which is then passed
  to a next interceptor in the chain. If no exception has been thrown when all interceptors have been processed, the last value is
  set into the property.

  The same chain is executed when getting a property - after the property is got from the JCR,
  <<<RenderChain.afterGetValue()>>> chains all interceptors starting from the last one to the first one, and calls
  <<<PropertyInterceptor.afterGetValue()>>> on each of them. The final value is returned to the caller.


* Configuration

  Core interceptors are declared in the <<<JCRStoreService>>> bean from the <<<applicationContext-jcr.xml>>> file.
  
  Custom interceptor can be declared in a core Spring file or in any module's Spring file as follows: 

+-----------------------------------------------
<bean name="scriptFilteringInterceptor" parent="propertyInterceptorRegistrator">
    <property name="propertyInterceptor">
        <bean class="org.jahia.services.content.interceptor.HtmlFilteringInterceptor" parent="abstractRichTextPropertyInterceptor">
            <property name="filteredTags" value="script"/>
            <property name="removeContentBetweenTags" value="true"/>
        </bean>
    </property>
</bean>
+-----------------------------------------------

  The aforementioned example registers an interceptor to filter out <<<\<script/\>>>> tags with content from all rich text properties
  before storing their value into repository. 

* Implementing an interceptor

  An interceptor needs to implement the <<<org.jahia.services.content.interceptor.PropertyInterceptor>>> interface.
  A base implementation class is provided for convenience: <<<org.jahia.services.content.interceptor.BaseInterceptor>>>
  that already supports some criteria, like node type, property required type, property name or selector type. 

  Assuming we are implementing a filtering interceptor for forum or blog posts and comments:
  
+-----------------------------------------------
<bean name="postFilteringInterceptor" parent="propertyInterceptorRegistrator">
    <property name="propertyInterceptor">
        <bean class="org.jahia.modules.custom.interceptor.PostFilteringInterceptor" parent="abstractRichTextPropertyInterceptor">
            <property name="nodeTypes" value="jnt:post"/>
            <property name="requiredTypes" value="String"/>
        </bean>
    </property>
</bean>
+-----------------------------------------------

  An interceptor in the example above is configured to be applied on text (String) properties of nodes with node type <<<jnt:post>>>.  

  An implementation of the interceptor can look as follows (for the sake of simplicity the filtering logic is left out):
  
+-----------------------------------------------
public class PostFilteringInterceptor extends BaseInterceptor {

    @Override
    public Value beforeSetValue(JCRNodeWrapper node, String name,
            ExtendedPropertyDefinition definition, Value originalValue) throws RepositoryException {
        String content = originalValue.getString();

        if (content == null || content.length() == 0) {
            return originalValue;
        }

        String result = filter(content);

        return !result.equals(content) ? node.getSession().getValueFactory().createValue(result)
                : originalValue;
    }

    @Override
    public Value[] beforeSetValues(JCRNodeWrapper node, String name,
            ExtendedPropertyDefinition definition, Value[] originalValues)
            throws RepositoryException {

        Value[] res = new Value[originalValues.length];

        for (int i = 0; i < originalValues.length; i++) {
            Value originalValue = originalValues[i];
            res[i] = beforeSetValue(node, name, definition, originalValue);
        }
        return res;
    }

    private String filter(String content) {
        // TODO implement text filtering logic here

        return content;
    }
}
+-----------------------------------------------
