Actions Framework

 Jahia provides several mechanisms to render your contents, it also provides some to allow end-users or other systems
 to interact with your content through action on said content.

 Actions are activated on an HTTP POST request, to comply with the REST methodology. Provided actions allows a lot of interactions already,
 like adding a comment on any node, starting workflows, sending form submission by mail, register new user, etc.

 An Action is a simple class extending the <<<org.jahia.bin.Action>>> abstract class, which is responsible of handling
 permissions and other restrictions. You need to override the method doExecute, to provide your own Action.

+---------------------------
public abstract ActionResult doExecute(HttpServletRequest req, RenderContext renderContext, Resource resource,
                                       JCRSessionWrapper session, Map<String, List<String>> parameters,
                                       URLResolver urlResolver)
                                       throws Exception;
+---------------------------

 You can do anything you want in an action, but keep in mind that the shortest time your action take to execute the better end-user
 experience is.

 As said previously, Actions are called through HTTP POST methods, but as a result of an action you can let the user stay on
 its current web page or redirect to another web page. The result can be a JSON serialized object. This allows to easily interact with
 framework like JQuery. To describe this behaviour, the method doExecute returns a <<<org.jahia.bin.ActionResult>>> object.
 It contains a HTTP response code and the eventual redirect URL and <<<org.json.JSONObject>>> instance.

Example based on the RateContent Action

+-------------------------------------
package org.jahia.modules.rating.actions;
|
|
public class RateContent extends Action {
    JCRTemplate jcrTemplate;

    public void setJcrTemplate(JCRTemplate jcrTemplate) {
        this.jcrTemplate = jcrTemplate;
    }

    @Override
    public ActionResult doExecute(HttpServletRequest req, RenderContext renderContext, final Resource resource, JCRSessionWrapper session, final Map<String, List<String>> parameters, URLResolver urlResolver) throws Exception {
        return (ActionResult) jcrTemplate.doExecuteWithSystemSession(null,session.getWorkspace().getName(),session.getLocale(),new JCRCallback<Object>() {
            public Object doInJCR(JCRSessionWrapper session) throws RepositoryException {
                JCRNodeWrapper node = session.getNodeByUUID(resource.getNode().getIdentifier());
                if (!node.isNodeType("jmix:rating")) {
                    session.checkout(node);
                    node.addMixin("jmix:rating");
                    session.save();
                }
                List<String> values = parameters.get("j:lastVote");
                node.setProperty("j:lastVote", values.get(0));
                node.setProperty("j:nbOfVotes",node.getProperty("j:nbOfVotes").getLong()+1);
                node.setProperty("j:sumOfVotes",node.getProperty("j:sumOfVotes").getLong()+values.get(0));
                session.save();
                try {
                    return new ActionResult(HttpServletResponse.SC_OK, node.getPath(), Render.serializeNodeToJSON(node));
                } catch (IOException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                } catch (JSONException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                return null;
            }
        });
    }
}
+-------------------------------------

 The <<<org.jahia.bin.Render.serializeNodeToJSON>>> method is a utility function that returns a JSONObject representing a node.

 Declaration of an Action is done via Spring. In our example, this action is defined in the rating module like this:

+---------------------------
    <bean class="org.jahia.modules.rating.actions.RateContent" >
        <property name="name" value="rate"/>
        <property name="jcrTemplate" ref="jcrTemplate"/>
    </bean>
+---------------------------


Calling an Action from your forms

 Calling an action is simple as calling <node/path>.actionName.do.
 In our example for the RateContent Action, here is an extract of a jQuery function in <<<rateable.jsp>>>:

+----------------------------------
$.post("<c:url value='${url.base}${bindedComponent.path}'/>.rate.do", {'j:lastVote': value,'jcrMethodToCall':"post",
    'jcrCookieName':"rated${bindedComponent.identifier}",
    'jcrCookieValue':"${currentNode.identifier}"}, function(
        result) {
    <%-- Select stars from "Average rating" control to match the returned average rating value --%>
    $("#avg${id}").stars("select", Math.round(result.j_sumOfVotes / result.j_nbOfVotes));
    <%-- Update other text controls... --%>
    $("#all_votes${id}").text(result.j_nbOfVotes);
    $("#all_avg${id}").text(('' + result.j_sumOfVotes / result.j_nbOfVotes).substring(0, 3));
    <%-- Display confirmation message to the user --%>
    $("#messages${id}").html("<br/><fmt:message key="label.ratingSaved"/> (" + value + "). <fmt:message key="label.thanks"/>!").stop().css("opacity", 1).fadeIn(30);
    <%-- Hide confirmation message and enable stars for "Rate this" control, after 2 sec... --%>
    setTimeout(function() {
        $("#messages${id}").fadeOut(1000, function() {
//            ui.enable();
        });
    }, 2000);
}, "json");
+----------------------------------

 Here we see that by posting on the "\<c:url value='${url.base}${bindedComponent.path}'/\>.rate.do URL, we are calling the
 RateContent Action on the bound component.

 In <<<rating.hidden.plusone_minorone_form.jsp>>>, we can see another example of calling our Action, this time from a form:

+------------------------------------
<c:set var="cookieName" value="rated${currentNode.identifier}"/>
<c:if test="${renderContext.loggedIn and (empty cookie[cookieName])}">
    <form action="<c:url value='${url.base}${currentNode.path}'/>.rate.do" method="post"
          id="jahia-forum-post-vote-${currentNode.identifier}">
        <input type="hidden" name="jcrRedirectTo" value="<c:url value='${url.base}${renderContext.mainResource.node.path}'/>"/>
            <%-- Define the output format for the newly created node by default html or by redirectTo--%>
        <input type="hidden" name="jcrNewNodeOutputFormat" value="html"/>
        <input type="hidden" name="jcrMethodToCall" value="post"/>
        <input type="hidden" name="j:lastVote" value="1"/>
        <input type="hidden" name="jcrCookieValue" value="${currentNode.identifier}"/>
        <input type="hidden" name="jcrCookieName" value="${cookieName}"/>
        <input type="hidden" name="jcrReturnContentType" value="html"/>
    </form>
</c:if>
+------------------------------------

Form parameters and file uploading

 In an Action you will received your form parameters inside the parameters map. Your form submission, will pass through several
 components before reaching your Action. Those components are responsible for managing the security (captcha validation,
 permissions check) and the uploading of files. If your action needs to manage files, the file will be uploaded in temporary folder,
 so you will only have to choose where to save it in the JCR or elsewhere.

 Example of getting an uploaded file in your action and handling it in there :

+-------------------------------
final FileUpload fu = (FileUpload) req.getAttribute(FileUpload.FILEUPLOAD_ATTRIBUTE);
DiskFileItem inputFile = fu.getFileItems().get("fileField");
+-------------------------------

 This example is from the DocumentConverterAction class.

Chaining Actions in one request

 Jahia provides a ChainAction class that allows to chain actions called. You'll have to pass a <<<chainOfAction>>> parameter
 containing the list of action to execute - all actions will be executed sequentially with the same parameters, and the
 the result will be the one of the last action.

 For example, the following form will call <<<mail>>> and <<<redirect>>> actions :

+-----------------------------
 <form action="mynode.chain.do" method="post">
     <input type="hidden" name="chainOfAction" value="mail,redirect"/>
   ...
 </form>
+-----------------------------

Interacting with other Jahia subsystems

 Your action can also interact or be called by other Jahia subsystems like rules or GWT UI, for this your action must
 also implements the <<<<BackgroundAction>>>> interface:

+---------------------
public class SendAsNewsletterAction extends Action implements BackgroundAction {
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
    public void executeBackgroundAction(JCRNodeWrapper node) {
        // do local post on node.getPath/sendAsNewsletter.do
        try {
            Map<String,String> headers = new HashMap<String,String>();
            headers.put("jahiatoken",TokenAuthValveImpl.addToken(node.getSession().getUser()));
            String out = httpClientService.executePost("http://localhost:8080"+
                    Jahia.getContextPath() + Render.getRenderServletPath() + "/live/"
                            + node.getResolveSite().getDefaultLanguage() + node.getPath()
                            + ".sendAsNewsletter.do", null, headers);
            logger.info(out);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
}
+---------------------

 Example of usage in rules:

+------------------------
rule "Schedule as a newsletter"
    when
        A property j:scheduled has been set on a node
            - the node has the type jnt:newsletterIssue
    then
        Log "Scheduling newsletter " + node.getPath() + " at " + propertyValueAsString
        Execute the action "sendAsNewsletter" at j:scheduled on the node
end
+-------------------------
