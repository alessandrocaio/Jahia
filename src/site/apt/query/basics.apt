Query basics

  With Jahia 6.6 all the Jahia content is now stored in Jackrabbit, which itself provides powerful query capabilities. This
  made the proprietary query/indexing code of Jahia obsolete. In order to continue some supporting interesting features, we enhanced
  the index/query methods of Jackrabbit. Other features are achieved differently now, and some have been dropped or postponed for
  later releases. The move to Jackrabbit also opened up new powerful possibilities and more flexible querying.
  
  Now you have three alternatives to implement queries:

* JCR Java Query Object Model (JQOM) versus SQL-2 versus XPATH

  The {{{http://jcp.org/aboutJava/communityprocess/pr/jsr283/}Java Content Repository (JCR) 2.0 specification (JSR-283)}} has deprecated the 
  use of SQL and XPATH and replaced this with a specification of the Abstract Query Model (provided implementation is called JCR Java Query Object Model) and 
  the SQL-2 query syntax (similar to SQL). Still Jackrabbit continues to support the XPATH query language, which was specified in version 1.0 
  of the JCR.
  
  Jahia supports all of them and provides convenient JSP tags for each possibility to ease and speed up development of modules, which use queries.
  
  JQOM and SQL-2 are both based on the new Abstract Query Model (AQM), whereas XPATH is using legacy code in the backend. Therefore
  you will find functional and performance differences between the three approaches. 
  
  Jahia recommends the usage of SQL-2 for hardcoded queries and JQOM wherever a query is built dynamically depending on user input. XPATH should
  only be used as last resort, as due to its longer existence and optimizations some queries may only work or perform well with XPATH (until
  Jackrabbit will also tune the queries based on AQM). On the other side AQM allows for more complex queries (like joins), which are not 
  possible with XPATH, but such queries often have some performance penalties. 
  
** JQOM

  Already in Jahia 5 we provided tags for container queries, which were heavily based on the Abstract Query Model. Because of this, these tag library
  is still available in Jahia 6.6 and it is now not only limited to container queries, but you can use it for queries on any node type.

  The following example shows how to query all nodes having the mixin type "jmix:sitemap" and which are either the current node or a descendant of the
  current node.

+----------------------------------------
<%@ taglib prefix="query" uri="http://www.jahia.org/tags/queryLib" %>
<%@ taglib prefix="jcr" uri="http://www.jahia.org/tags/jcr" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<jcr:jqom var="sitemaps">
    <query:selector nodeTypeName="jmix:sitemap" selectorName="stmp"/>
    <query:or>
        <query:descendantNode path="${currentNode.path}" selectorName="stmp"/>
        <query:sameNode path="${currentNode.path}" selectorName="stmp"/>
    </query:or>
</jcr:jqom>

<c:forEach items="${sitemaps.nodes}" varStatus="status" var="sitemapEL">
    <c:url value="${url.base}${sitemapEL.path}.html" />
</c:forEach>   
+----------------------------------------

  The above example immediately executes the query and writes the results into the <<<pageContext>>> variable named <<<sitemaps>>>.
  The resulting object is of type <<<javax.jcr.query.QueryResult>>>, which lets you access the resulting nodes or row objects.
  
  Like in previous Jahia versions, you can also first define the queries and store them in a variable and refer to this
  varaiable in <<<\<jcr:jqom\>>>>, like this:
  
+----------------------------------------
<query:definition var="listQuery" scope="request">
    <query:selector nodeTypeName="nt:base"/>
    <query:descendantNode path="${currentNode.properties['relative'].boolean ? renderContext.mainResource.node.path : renderContext.site.path}"/>
    <query:column columnName="rep:facet(nodetype=jmix:tagged&key=j:tags&facet.mincount=${usageThreshold}&facet.limit=${numberOfTagsLimit}&facet.sort=true)" propertyName="j:tags"/>
</query:definition>

<jcr:jqom var="result" qomBeanName="listQuery" scope="request"/>
+----------------------------------------        

  The above example defines a query on the base nodetype and depending on the <<<relative>>> property value in the current node, it finds all nodes, which are descendant
  of the current node or all nodes of the current site.
  
  The column in this case specifies to run Solr based faceting (this is a Jahia specific extension to Jackrabbit) and return the facet counts. You will find more information in the 
  description of the {{{../../jahia-modules/facets/index.html}facet module}}.
  
  In this case the query object model is stored into the <<<listQuery>>> variable, which is then used as reference to run the query in the <<<\<jcr:jqom\>>>>
  
  To learn about the different tags, please look directly at the <<<query>>> tag library (<<<query.tld>>>). We made sure that for all query elements described in the specification of the
  {{{http://www.day.com/specs/jcr/2.0/6_Query.html}Abstract Query Model}} we provide a convenient JSP tag.  
  
  You can also create the JQOM queries directly using the API like shown in the {{{http://www.day.com/specs/jcr/2.0/6_Query.html}specification}}. For example:
  
+----------------------------------------
QueryObjectModelFactory factory = session.getWorkspace().getQueryManager().getQOMFactory();
QOMBuilder qomBuilder = new QOMBuilder(factory, session.getValueFactory());

qomBuilder.setSource(factory.selector("jnt:event", "event"));
qomBuilder.andConstraint(factory.descendantNode("event", "/sites/eventTest"));

QueryObjectModel qom = qomBuilder.createQOM();
QueryResultWrapper res = (QueryResultWrapper) qom.execute();
+----------------------------------------  

  So, as you see, using the JQOM requires more code lines, but it is handy if you need to setup dynamic and conditional queries. For hardcoded
  queries however we recommend using SQL-2.

** SQL-2

  SQL-2 is a query language, which is also mapped to the Abstract Query Model. So Jackrabbit provides a parser, which will translate the queries and eventually create the JQOM and then both
  implementations use the same backend query engine in Jackrabbit. 
  
  The SQL-2 grammar is heavily based on SQL, with some extensions for hierarchical queries as used in modern content repositories, but some limitations, so that there is
  common standard support across all Java content repository vendors.
  
  You can learn more about SQL-2 at these sources: {{{http://www.h2database.com/jcr/grammar.html}SQL-2 Grammar (railroad diagrams)}}, {{{http://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-spi-commons/src/test/resources/org/apache/jackrabbit/spi/commons/query/sql2/test.sql2.txt?view=markup}SQL-2 examples}},
  {{{http://www.day.com/specs/jcr/2.0/6_Query.html}Specification}}
  
  The advantage of SQL-2 towards JQOM is that the query definition is short and easier to read, but there is one additional layer as the query needs to be parsed to the JQOM, so there may
  still also be some hidden bugs, which fail to correctly translate the query. If you have complex dynamic or conditional queries, then JQOM may be the better choice.  
  
  Here is an example how to use an SQL-2 query in the modules by using <<<\<jcr:sql\>>>> and other tags:

+----------------------------------------
<jcr:sql var="receivedMessages"
    sql="select * from [jnt:socialMessage] where isdescendantnode(['${user.path}/messages/inbox']) order by [jcr:lastModified] desc"/>
             
<ul class="userMessagesList">
    <c:forEach items="${receivedMessages.nodes}" var="userMessage">
        <li id="social-message-${userMessage.identifier}">
            <template:module path="${userMessage.path}" />
        </li>
    </c:forEach>             
</ul>             
+----------------------------------------             

  And here is an example of how to use the API to run SQL-2 queries:
  
+----------------------------------------
QueryManager queryManager = session.getWorkspace().getQueryManager();
String query = "SELECT * FROM [jnt:news] as news WHERE contains(news.*, 'ACME') ORDER BY news.[date]";
Query q = queryManager.createQuery(query, Query.JCR_SQL2);
QueryResultWrapper queryResult = (QueryResultWrapper) q.execute();  
+----------------------------------------  

** XPATH  

  XPATH has been deprecated as of {{{http://www.day.com/maven/jsr170/javadocs/jcr-2.0/javax/jcr/query/Query.html}JCR 2.0}}, but Jackrabbit and Jahia still support it. View it as 
  last resort, if you cannot make queries work with SQL-2 or JQOM, or if they have bad performance. As XPATH exists much longer and has been optimized a lot, some queries may
  work much better with XPATH. So you could temporarily implement such queries with XPATH. Jahia also internally implemented some queries with XPATH (e.g. the search tags), as we
  found that some functionality did not work with SQL-2. Over the time Jahia will also migrate these remaining XPATH queries to SQL-2.
  
  Notice however that when using XPATH queries, you may need to have more knowledge of the way how Jahia stores nodes internally (e.g. translation nodes), as SQL-2 and JQOM queries
  are automatically overwritten to mask the internal storage structure. Also for JQOM and SQL-2 Jahia is internally modifying the query and adding the current language as a constraint
  (if no other constraint is existing on the language property). This is not done with XPATH queries, which means that if you do not modify the query or filter the results, you may get 
  duplicated results - one for the main node and one for the translation node, as both are returned by querying on a nodetype. 
  
  More information about XPATH query syntax can be found in the {{{http://www.day.com/specs/jcr/1.0/6.6.2_XPath_and_SQL.html}JCR 1.0 specification}} or check this
  {{{http://wiki.gxdeveloperweb.com/confluence/display/GXDEV/XPath+JCR+Sample+Queries}examples}}. 

  For using XPATH queries in your JSP modules, you can use the <<<\<jcr:xpath\>>>> tag similarly as the <<<\<jcr:sql\>>>> tag in the above example.
  
  Here is an example of how to use XPATH queries with the API:
  
+----------------------------------------
QueryResult result = session.getWorkspace().getQueryManager()
    .createQuery("/jcr:root"
        + (StringUtils.isEmpty(site) ? "" : "/sites/"
            + JCRContentUtils.stringToJCRPathExp(site))
        + "//element(*, jnt:vanityUrl)[@j:url = "
        + JCRContentUtils.stringToQueryLiteral(url)
        + "]", Query.XPATH).execute();
List<VanityUrl> existingUrls = new ArrayList<VanityUrl>();
for (NodeIterator it = result.getNodes(); it.hasNext();) {
    JCRNodeWrapper node = (JCRNodeWrapper) it.next();
    existingUrls.add(populateJCRData(node, new VanityUrl()));
}
+----------------------------------------

* Fulltext search expression
  
  The fulltext search expression supported with JQOM and SQL-2 is defined in the {{{http://www.day.com/specs/jcr/2.0/6_Query.html#%226.7.19%20FullTextSearch%22}JCR 2.0 specification}}.
  
  This same expression is also supported in the simple search components' input field, where users can enter fulltext search criteria.  
  
  Terms can either be single words or phrases within double quotes. Here is a description of the expression syntax from the specification:
  
    * A term not preceded with "-" (minus sign) is satisfied only if the value contains that term.
    
    * A term preceded with "-" (minus sign) is satisfied only if the value does not contain that term.
    
    * Terms separated by whitespace are implicitly "ANDed".
    
    * Terms separated by "OR" are "ORed".
    
    * "AND" has higher precedence than "OR".
    
    * Within a term, each double quote ("), "-" (minus sign), and "\" (backslash) must be escaped by a preceding "\" (backslash).  
  
* Jahia's content datamodel

  There are some specialities in the way how Jahia stores nodes, mainly in regards of how we store multilingual nodes/properties.
  Generally this is hidden thus not transparent to the Content manager UI or even when using the JCR API. Also for JQOM and SQL-2
  queries Jahia will in the backend modify the query in order to correctly handle multilingual content, but if you use XPATH, you 
  will need to know this data structure.
  
  Basically when a node is based on a node type, which defines multilingual properties (<<<i18n>>> attribute), Jahia will automatically create
  a subnode of type <<<jnt:translation>>> for each language into which the content node is translated. For instance when a node uses mixins 
  like <<<mix:title>>> or <<<jmix:description>>>, this will already create <<<jnt:translation>>> nodes for each language, because they 
  contain internationalized properties

+----------------------------------------
[mix:title]
  mixin
  - jcr:title (STRING) i18n boost=2.0          
+----------------------------------------

  This means that all non internationalized properties will be stored in the main node, and all internationalized properties will be stored 
  in the <<<jnt:translation>>> subnodes (one subnode per language) which will also contain the property <<<jcr:language>>> with the locale name (=ISO 639 language 
  code and optionally the ISO 3166 country code delimited with an underscore).
  
  In order to make queries perform fast and to remove the necessity to use joins, we are indexing all non internationalized properties also 
  within the index document of the translation nodes. We made modifications to Jackrabbit's query engine (for JQOM and SQL-2) in order to 
  gracefully handle this design decision and let Jahia module developers and users create queries as if all properties are stored in the main 
  node. Only if you decide to use XPATH you may have to take care about this.

** Query using language(s)

  If your query does not contain a constraint with the <<<jcr:language>>> property and if the selector node type contains multilingual properties,
  Jahia will automatically extend the query to return just objects of the current language.
  
  If you want to also query in other languages than the current, you have to add the constraint on <<<jcr:language>>> yourself.
  
  For instance this is an example query to retrieve French news sorted by date:
  
+----------------------------------------
SELECT * FROM [jnt:news] as news 
    WHERE ISCHILDNODE(news, [/sites/mySite/home/page8/news]) AND news.[jcr:language] = 'fr' 
    ORDER BY news.[date]
+----------------------------------------  

** Query using site(s)

  If you have multiple sites in your workspace and you want to limit the queries to particular sites, you have to use the <descendanNode> constraint
  on the site's root node, which is <<</sites/\<yourSiteName\>>>>.
  
  For instance if you want to query all news nodes in the current language in the sites <<<myFirstSite>>> or <<<mySecondSite>>> you can use the 
  constraint as in the following example: 
   
+----------------------------------------
SELECT * FROM [jnt:news] as news 
    WHERE ISDESCENDANTNODE(news, [/sites/myFirstSite]) OR ISDESCENDANTNODE(news, [/sites/mySecondSite]) 
    ORDER BY news.[date]
+----------------------------------------
  
** Query using workflow state
  
  In Jahia 5 and 6 the required object state (live or staging) was part of the query. Since Jahia 6.6 this is no longer part of the query,
  because we now have two workspaces: "live" and "default" (=edit mode). Now you either have to get the Query Manager from one of these
  two workspaces and then you either query all published "live" objects or the objects in the edit workspace.
  
  This is done automatically depending on the workspace key in the URL of the request.   
  
** Query using categories or tags

  Categories and tags are stored as references, so you need to specify the UUID of the category or tag node in the query, like this: 
  
+----------------------------------------
SELECT * FROM [jnt:news] as news 
    WHERE news.[j:defaultCategory] = 'adfb06e2-f0bd-45c5-b0e8-15691f6bbd37'
            
SELECT * FROM [jnt:news] as news 
    WHERE news.[j:tags] = 'af0f02f8-1c4a-4026-9d79-4939e373db2c'
+----------------------------------------            

  Usually you will first get the category or tag node and then use getIdentifier() to retrieve its UUID.
  
* REST API

  See the {{{../../jahia-modules/rest.html#Find}REST article}} for a description how to use Jahia's REST API to do queries.

* Suggested typing  
  
  See {{{../../jahia-modules/autocompletion.html}integration of auto-completion}} for a description how to use the indexed data for suggested typing. 
  
* Performance hints
  
  * If you could get thousands of result nodes and as the user can not view all of them, always try to set a limit to limit the number of
  result nodes.
  
  * If not necessary try to avoid joins until they perform well.
  
  * Look at the Jackrabbit mailing list archive to get some advice regarding performance of queries 