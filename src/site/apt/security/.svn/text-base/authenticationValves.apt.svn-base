Authentication valves

* Overview

  Jahia contains a set of built-in valves, organized in a pipeline, which are used to authenticate
  the user, making a request to the Web application, and keep track of user session.

  The pipeline can be easily extended with custom valves, e.g. authenticating the user against
  an external system.
  
  Next sections provide an overview of the built-in valves as well as a short How-to for
  implementing and registering a custom valve.
  
  This description applies to Jahia 6.6.0.0.
  
* Built-in valves

  The authentication valves pipeline is configured in a Spring bean definition file
  <<<org/jahia/defaults/config/spring/auth/applicationcontext-auth-pipeline.xml>>>,
  packaged into the jahia-impl-6.6.0.0.jar file.
  
  The pipeline is executed in a sequence (as a chain). If a valve succeeds to authenticate the user,
  the pipeline execution is stopped. Otherwise it is delegated to the next valve in the pipeline.
     
  The default list of valves and their execution sequence (the most top have the precedence) is as follows:
  
  [[1]] <<<HttpBasicAuthValve>>> \- uses {{{http://en.wikipedia.org/wiki/Basic_authentication}Basic access authentication}} mechanism for authenticating the user requests.
  
  [[2]] <<<TokenAuthValve>>> \- used by Jahia for internal requests, e.g. for e-mail newsletter content rendering, and relies on the <<<jahiatoken>>> HTTP request header.
  
  [[3]] <<<LoginEngineAuthValve>>> \- implements the login form processing for provided username and password values.
  
  [[4]] <<<SessionAuthValve>>> \- authenticates the request by looking up the valid user in the current HTTP session scope. If a non-guest user is found in the session scope the pipeline execution stops here. Otherwise a next valve is invoked.  
  
  [[5]] <<<CookieAuthValve>>> \- relies on the usage of <"Remember me"> feature in the login screen, when a special persistent cookie is stored
        in the user's Web browser. This cookie is used to lookup and authenticate the user requests, having that particular cookie. 
  
  [[6]] <<<ContainerAuthValve>>> \- utilizes the authentication scheme, provided by the Servlet container (application server itself).
        In such a case, the authentication is done by the server and the valid user is available to the <<<ContainerAuthValve>>>
        via <<<request.getUserPrincipal()>>>. 
  
  [[6]] <<<CasAuthValve>>> ({{{Enterprise}*}}) \- implements the single sign-on using an external Central Authentication Service
        (e.g. provided by a {{{http://www.jasig.org/cas}Jasig project}}.
  
  [[6]] <<<SpnegoAuthValve>>> ({{{Enterprise}*}}) \-  authenticate users with {{{http://en.wikipedia.org/wiki/SPNEGO}SPNEGO mechanism}}, which relies on
        {{{http://en.wikipedia.org/wiki/NTLM}NTLM}} and {{{http://en.wikipedia.org/wiki/Kerberos_%28protocol%29}Kerberos}} negotiable sub-mechanisms.
  
  []
  
  The default pipeline can be {{{custom}extended}} or overridden completely by providing a custom Spring
  bean definition with id <<<authPipeline>>>.
  
* Implementing {custom} authentication valve

  Here we will show how a custom authentication valve can be implemented and registered in Jahia 6.6
  using a hypothetical example.
  
  Let's consider that an external service (server) is doing the user authentication and
  upon successful "login" operation it stores a special authentication ticket (token)
  in the header (say, <<<Authentication-Ticket>>>) of HTTP request that is forwarded to Jahia.
  
  The skeleton code of the valve class will look as follows:
  
+----------------------------------------
package org.jahia.params.valves;

import javax.servlet.http.HttpServletRequest;

import org.jahia.params.ProcessingContext;
import org.jahia.pipelines.PipelineException;
import org.jahia.pipelines.valves.ValveContext;
import org.jahia.registries.ServicesRegistry;
import org.jahia.services.usermanager.JahiaUser;

public class MyCustomAuthValve extends AutoRegisteredBaseAuthValve {

    public void invoke(Object context, ValveContext valveContext) throws PipelineException {
        // Retrieve the context, the current request and the header value
        AuthValveContext authContext = (AuthValveContext) context;
        HttpServletRequest request = authContext.getRequest();
        String ticket = request.getHeader("Authentication-Ticket");

        if (ticket != null) {
            // we got the authentication ticket -> verify it and get the username
            String username = retrieveAuthenticatedUsername(ticket, request);
            if (username != null) {
                // lookup the user by the username
                JahiaUser user = ServicesRegistry.getInstance().getJahiaUserManagerService()
                        .lookupUser(username);
                if (user != null) {
                    // check if the user account is not locked
                    if (isAccountLocked(user)) {
                        return;
                    }
                    // user found
                    // 1) set the current JCR session user
                    authContext.getSessionFactory().setCurrentUser(user);
                    // 2) update the HTPP session user
                    request.getSession().setAttribute(ProcessingContext.SESSION_USER, user);

                    // we are done, the authentication pipeline execution stops here
                    return;
                }
            }
        }

        // invoke next valve
        valveContext.invokeNext(context);
    }

    private String retrieveAuthenticatedUsername(String ticket, HttpServletRequest request) {
        String username = null;

        // Here an external authentication service is contacted in order to verify
        // the ticket validity and retrieve the username

        return username;
    }

}
+----------------------------------------

  The valve class extends the <<<AutoRegisteredBaseAuthValve>>> for easier registration in
  Jahia authentication pipeline.
  
  The main steps in the valve are:
  
  [[1]] Check if the required authentication information is present or a special condition is met
        (in our example it is the presence of the <<<Authentication-Ticket>>> HTTP request header). 
  
  [[2]] Contact the external service, which did the authentication, in order to verify the ticket validity
        and obtain the corresponding username.  
  
  [[3]] Lookup the <<<JahiaUser>>> by the obtained username. 
  
  [[4]] Check if the user account is not locked. 
  
  [[5]] Update the JCR and HTTP session objects with the found user. 
  
  [[6]] If all successful, stop the execution of the authentication pipeline,
        otherwise invoke the next valve in the pipeline.
  
  [] 
  

  When the implementation is finished, the valve can be registered in Jahia using a Spring bean
  definition (e.g. in your custom module). With our example it can be done as follows:
  
+----------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	
	<bean id="MyCustomAuthValve" class="org.jahia.params.valves.MyCustomAuthValve"/>
</beans>
+----------------------------------------

  In such a case the valve will be added at the end of the authentication pipeline.
  
  In most of the cases a custom valve should go after the <<<SessionAuthValve>>>, which
  uses a valid user (non-guest), found in the current HTTP session, and does not invokes the
  next valves in the pipeline in such a case.
  
  In some cases it could be needed to add the custom valve "before" a particular one,
  e.g. before the <<<SessionAuthValve>>>, for example if the authentication scheme
  does not imply the explicit logout mechanism and the session is not invalidated.
  The registration of the valve in such case can use an explicit position: 
  
+----------------------------------------
    <bean id="MyCustomAuthValve" class="org.jahia.params.valves.MyCustomAuthValve">
        <property name="positionBefore" value="SessionAuthValve"/>
    </bean>
+----------------------------------------

  Available properties for positioning are:
  
  * <<<position>>> \- absolute position in the pipeline (a 0-based number)

  * <<<positionAfter>>> \- relative position to register valve after the specified one
    (the value is the ID of the valve, the current one should be inserted after)

  * <<<positionBefore>>> \- relative position to register valve before the specified one
    (the value is the ID of the valve, the current one should be inserted before)

  []


=====================
  \* \- is part of the {Enterprise} Jahia Subscription offering and requires advanced configuration.