Security aspects

* Overview

  Provides a brief overview of the security considerations and the ways
  for reducing risks and protecting system and data.
  
* Authentication {valves}

  Jahia already contains a set of built-in authentication valves. Custom valves can be implemented and deployed easily
  to extend the standard authentication pipeline in Jahia. See {{{./authenticationValves.html} authentication valves}} section for more details.  
  
* {User} authentication and data

  In this chapter we describe how the user data is protected and which security-related
  concerns can arise in regard to the user authentication.

** Password encryption

  Passwords for Jahia users are stored in the JCR repository one way encrypted (SHA-1).
  
** Jahia Tool Manager password

  The Jahia Tool Manager password is specified in the <<<jahia.properties>>> (also SHA-1 + Base64 encoded).
  Due to security considerations this password can be only reset manually directly in the <<<jahia.properties>>> file.
  Jahia Tools Area provides a utility JSP for encrypting clear text passwords: {{{http://localhost:8080/tools/pwdEncrypt.jsp}http://localhost:8080/tools/pwdEncrypt.jsp}}
    

** Resetting root user password

  The following is the procedure for resetting the password of the <root> user in Jahia 6.6:
  
  [[1]] Create a plain text file <<<\<jahia-web-app-root\>/WEB-INF/etc/config/root.pwd>>> with a new root
  user password in clear text
  
  [[2]] Restart the server

  [[3]] You can now login with your new password as root
  
  []

** Locking a user account

  User account can be locked in Jahia 6.6 either using a User Management UI in Jahia Administration
  or using the Content Manager and setting the <<<j:accountLocked>>> property on the corresponding
  user node to <<<true>>>. 

** Sensitive user data

  Non-public user profile data (user node properties) are not exposed for an unauthorized access. 

** Enabling {SSL} for logged in users

  There is an option for "forcing" a switch to an SSL (HTTPS protocol) for a user session, from login to logout.
  This allows sites with higher security concerns to force secured connections for logged in users.
  
  In order to enable it, please:
   
  [[1]] Rename the file <<<\<jahia-web-app-root\>/WEB-INF/etc/config/urlrewrite-ssl.xml.disable>>> into <<<urlrewrite-ssl.xml>>>
  
  [[2]] Go into Jahia Administration UI and flush output HTML caches

  [[3]] Restart you server

  [[4]] Now the login forms will contain a URL, leading to HTTPS and logout links will do a redirect back to HTTP.
  
  []
  
  The behaviour could be adjusted by changing the URL rewrite rules in the <<<urlrewrite-ssl.xml>>> file.

* {Template} and action protection

** Module resources

  In all Jahia modules the following sensitive resources are protected from a direct access via Web browser:
  
  * content definition files (<<<*.cnd>>>)
  
  * rule files (<<<*.drl>>> and <<<*.dsl>>>)

  * I18N resource bundles and template properties (<<<*.properties>>>)
  
  * scripting templates for mail notifications (<<</mails/*.*>>>)
  
  * all resources under <<<META-INF>>> and <<<WEB-INF>>> folders
  
  * JSP templates (<<<*.jsp>>>)
  
  []

  So, when developing new modules take care, please, of protecting sensitive files by e.g. placing them into
  the <<<META-INF>>> folder, which is protected by default.
  
  <<<META-INF>>> is also the default folder for content and rule definition files.

** XSS vulnerabilities

  When developing custom JSP templates, especially those, requiring user interaction,
  the following rules of thumb can be used to reduce the risk of simple
  cross-site scripting {{{http://en.wikipedia.org/wiki/Cross-site_scripting}XSS}} attacks,
  such as JavaScript code injection.
  
  * when using values of request parameters in templates markup, they need to be escaped, e.g.:
  
+-----------------------------
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
...
<label for="username"><fmt:message key="label.username"/></label>
<input type="text" name="username" id="username" value="${fn:escapeXml(param.username)}" />
+-----------------------------  

  * expect that values, coming from request parameters can be not well-formed or malicious.
    For example, if your template expects a JCR node path as a request parameter <<<path>>>, you should
    take care of checking if the path value really corresponds to a node, i.e.:
  
+-----------------------------
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="jcr" uri="http://www.jahia.org/tags/jcr" %>
...
<jcr:node path="${param.path}" var="myNode"/>
<c:if test="${not empty myNode}">
   do something
</c:if>
<c:if test="${empty myNode}">
   unknown node path
</c:if>
+-----------------------------  

** Protecting render actions

  Render actions, which are subclasses of <<<org.jahia.bin.Action>>>, can be protected in several ways
  from execution by a unauthorized user or in the wrong context.
  
*** Valid authenticated user

  An execution of an action can require a valid authenticated user. This is the default level of
  protection for all render actions.
  
  If your action should be "available" for non-authenticated users or a protection is done in a
  different manner, you can "relax" this constraint by specifying a <<<false>>> value for
  action's <<<requireAuthenticatedUser>>> property in its Spring bean definition file.
  
+-----------------------------  
<bean class="org.jahia.modules.forum.actions.AddTopic" >
    <property name="name" value="addTopic"/>
    <property name="requireAuthenticatedUser" value="false"/>
</bean>
+-----------------------------  
   
*** Required permissions
 
  You can additionally specify a permission or multiple permissions a user, which is trying to execute this action,
  should have on the target content node.
  
  For example:
  
+-----------------------------  
<bean class="org.jahia.modules.blog.AddBlogEntryAction">
    <property name="requiredPermission" value="addBlogEntry"/>
</bean>
+-----------------------------  
  
  An action can require multiple permissions:
  
+-----------------------------  
    <property name="requiredPermission" value="accessIntranetArea+addBlogEntry"/>
+-----------------------------  

  or any of the specified permissions:
    
+-----------------------------  
    <property name="requiredPermission" value="addBlogEntry|moderateBlog"/>
+-----------------------------  
      
*** Required workspace
 
  An action execution can be limited to a particular workspace (<<<default>>> or <<<live>>>).
  
  For example, the <<<publish>>> action is relevant for the <<<default>>> workspace only:

+-----------------------------  
<bean class="org.jahia.modules.defaultmodule.actions.PublishAction">
    <property name="name" value="publish"/>
    <property name="publicationService" ref="jcrPublicationService"/>
    <property name="requiredPermission" value="publish"/>
    <property name="requiredWorkspace" value="default"/>
</bean>
+-----------------------------  

* Miscellaneous

** Disabling directory listing for WebDAV servlet

  In case a WebDAV client access is not used for managing resources in the JCR content repository,
  it is recommended that the directory listing is disabled for the WebDAV servlet, mapped to <<</repository>>>.
  
  
  For this the following key in <<<WEB-INF/etc/config/jahia.properties>>> file needs to be set to <<<true>>>:
  
+-----------------------------  
######################################################################
### WebDAV ###########################################################
######################################################################
# Disable the directory listing for /repository servlet.
# (WebDAV client access won't work in such a case)
repositoryDirectoryListingDisabled = true
+-----------------------------  
