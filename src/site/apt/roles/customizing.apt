Customizing built-in roles and permissions

* Overview

  Jahia provides a built-in set of roles and permissions for basic usage.

  Roles and permissions are defined in the <<</WEB-INF/etc/repository/root.xml>>> file in the JCR document view format.
  These entries are imported during the first startup of Jahia.
  
* {Built-in} roles/permissions

  Built-in roles and permissions are dedicated to all standard Jahia operations, administration, edit mode,
  studio, contribute mode, ...

  Predefined permissions are organized in main groups :

  * <<<repository-permissions>>> - These permissions are used by the JCR directly for low-level permission check, and must not be modified

  * <<<admin>>> - Access to different items in the administration panels

  * <<<studioMode>>> - all permissions related to studio

  * <<<editMode>>> - all permissions related to edit mode - access to different tabs and selectors can be set here

  * <<<contributeMode>>> - all permissions related to contribute mode

  * <<<managers>>> - access to different managers (document manager, portlet manager, content manager, etc.) can be granted using these permissions

  * <<<workflow-tasks>>> - permissions used by workflow definitions for task/permission mapping (see {{{../workflow/workflow.html}workflow}})

  * <<<wysiwyg-editor-toolbar>>> - by using these permissions it is possible to distinguish between three built-in types of the WYSIWYG HTML Editor (CKEditor) toolbar: full, basic and light.

  * <<<jobs>>> - permissions related to background jobs

  * <<<actions>>> - permissions for executing actions
  
  As an example here are the views of the edit content engine (tabs) for the user, having the built-in <<<editor>>> role:
  
[../images/roles/customizing-built-in-editor.png]

  and the same engine for the user with a custom <<<limited-editor>>> role, where the permissions to use/view the tabs where removed:
  
[../images/roles/customizing-limited-editor.png]
  

* {Modules} roles/permissions

  Permissions and roles can be extended or adjusted by modules. Usually modules will only import permissions and assign
  them to existing roles. Modules should import its specific permissions in <<</permissions/actions/<module-name>>>>

  In order to provide initial assignment of permissions to an existing role, just add the role in the import
  file with the <<<j:permissions>>> property set with the new permission.

  An example of the <<<permissions.xml>>> import file is given below:
  
+-------------
<?xml version="1.0" encoding="UTF-8"?>
<permissions jcr:primaryType="jnt:permission"
        xmlns:jcr="http://www.jcp.org/jcr/1.0"
        xmlns:j="http://www.jahia.org/jahia/1.0"
        xmlns:jnt="http://www.jahia.org/jahia/nt/1.0">
    <actions jcr:primaryType="jnt:permission">
        <blog jcr:primaryType="jnt:permission">
            <createNewBlog jcr:primaryType="jnt:permission"/>
            <addBlogEntry jcr:primaryType="jnt:permission"/>
            <editBlogEntry jcr:primaryType="jnt:permission"/>
            <testEditBlogEntry jcr:primaryType="jnt:permission"/>
            <test21EditBlogEntry jcr:primaryType="jnt:permission"/>
        </blog>
    </actions>
</permissions>
+-------------

  And the <<<roles.xml>>> for initial assignment of a permission looks for instance like this:
  
+-------------  
<?xml version="1.0" encoding="UTF-8"?>
<roles jcr:primaryType="jnt:roles"
       xmlns:jcr="http://www.jcp.org/jcr/1.0"
       xmlns:j="http://www.jahia.org/jahia/1.0"
       xmlns:jnt="http://www.jahia.org/jahia/nt/1.0">
    <reader jcr:primaryType="jnt:role"
             j:permissions="/permissions/actions/blog/createNewBlog"/>
</roles>
+-------------  