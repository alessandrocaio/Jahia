Core Module - CKEditor integration (TO BE UPDATED)

  CKEditor is a text editor to be used inside web pages. It's a WYSIWYG editor, which means that the text being edited on it looks as similar as possible to the results users have when publishing it. It brings to the web common editing features found on desktop editing applications like Microsoft Word and OpenOffice. In Jahia, CKeditor is used to display richText property of a content node.

  For more information about CKEditor, please look at: {{{http://ckeditor.com/}http://ckeditor.com/}}.


* How is it integrated into Jahia ?

  To install CKEditor the ckeditor.js, included in the distribution, has to be added into the <<<<head>>>> section.
  In order to avoid JavaScript conflicts, ckeditor.js is merged with the JavaScript generated by GWT.
  This is done by adding in the file <<</gwt/src/main/resources/org/jahia/ajax/gwt/JahiaGWT.gwt.xml>>> the following code:
  We use the version number (x.x.x) in the path of the editor directory.

+-------------------------------------
<module>
    ...
    <script src="./ckeditor-x.x.x/ckeditor.js"/>
    ...
</module>
+-------------------------------------

    The others files, coming with CKEditor distribution, are automatically located by ckeditor.js.
    However, these files are supposed to be in the same directory as ckeditor.js.
    As all GWT resources are in <<<.../gwt/resources>>> directory, a URL rewriting rule has been added:

+--------------------------------------
 <rule>
    <from>^(.*?)/gwt/(.*?)/ckeditor-x.x.x/(.*?)</from>
    <to last="true">$1/gwt/resources/ckeditor-x.x.x/$3</to>
    ...
</rule>
+--------------------------------------


* How is it integrated into GWT?

  CKEditor object, defined in ckeditor.js, has been wrapped in a GWT component: <<<org.jahia.ajax.gwt.client.widget.ckeditor>>>.
  Basically, this component is a set of GWT native methods that allow to interact with the embedded CKEditor instance:

+--------------------------------------
public class CKEditor extends Component {
...

    private native void _setCKData(String html)/*-{
        var oEditor = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::editorInstance ;
        oEditor.setData(html);
      }-*/;


    private native String getCKData()/*-{
        var oEditor = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::editorInstance ;
        return oEditor.getData();
      }-*/;


    private native JavaScriptObject initEditor(String contextPath,String servletPath)/*-{
        var config = this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::config;
        var oCKeditor = new $wnd.CKEDITOR.replace(this.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditor::instanceId,{
            width : config.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditorConfig::getWidth()(),
            height : config.@org.jahia.ajax.gwt.client.widget.ckeditor.CKEditorConfig::getHeight()()
        });

        return oCKeditor;
      }-*/;

...
}
+--------------------------------------

    To use the CKEditor as a GWT widget you can simply add the following code:

+--------------------------------------
...
CKEditor ck = new CKEditor();
...
+--------------------------------------

    There is also a field wrapper, compatible with 'Form' component of GXT. It can be used thanks to the following code

+--------------------------------------
...
Field fck = new CKEditorField();
...
+--------------------------------------

* How the CKEditor instance is configured ?


    Custom configuration for the CKEditor is located in the <<<gwt/resources/ckeditor/ckeditor_custom_config.js>>> file.


* How are jahia-pickers integrated in CKEditor ?

  A new GWT module, <<<ContentPicker.gwt.xml>>>, allowing to display Jahia picker in a full page, has been added.
  The URL of 'stand alone' pickers are specified in the CKEditor configuration (<<<ckeditor_custom_config.js>>>):

+--------------------------------------
...
CKEDITOR.editorConfig = function(config)
{
...
    config.filebrowserBrowseUrl = config.contextPath + '/engines/contentpicker.jsp?site=' + config.siteUuid;
    config.filebrowserImageBrowseUrl = config.contextPath + '/engines/contentpicker.jsp?type=imagepicker&site=' + config.siteUuid;
    config.filebrowserFlashBrowseUrl = config.contextPath + '/engines/contentpicker.jsp?mime=application%2Fx-shockwave-flash%2Cvideo%2Fx-flv&site=' + config.siteUuid;
    config.filebrowserLinkBrowseUrl = config.contextPath + '/engines/contentpicker.jsp?type=pagepicker&site=' + config.siteUuid;

...
};
...
+--------------------------------------

    The URL, coming from the link picker, is encoded and has the following patterns: <<</$\{servletPath\}/$\{contextPath\}/\{mode\}/\{lang\}/...>>>

    The encoding method used is: <<<org.jahia.ajax.gwt.client.util.URL.rewrite(...);>>>

    Example:
    
+--------------------------------------
  /jahia/cms/{mode}/{lang}/content/sites/ACME/home/page1.html
+--------------------------------------

    The end-user can replace manually <<</\{mode\}/\{lang\}/>>>, remove it, or let Jahia handle these 'place holders'.
