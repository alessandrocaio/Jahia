Creating custom menu items

  Customization can be done at two different levels: the menu structure itself (navMenu.jsp), and the rendering of items (navMenuItem.menuElement.jsp).

* {Menu} structure

  You can add a view for your menu (jnt:navMenu) to change its structure or add javascript.
  The view will be automatically available in the Layout tabâ€™s view selector of the menu.

  You just have to create a new file under the jnt_navMenu/html folder or create this folder tree in your module directory, named navMenu.\<yourView\>.jsp where \<yourView\> is your view name.

  In a file named navMenu.yourView.properties you have to set two properties for this view, as they are needed to manage cache dependency:

+----
 cache.mainResource = true
 cache.mainResource.flushParent = true
+----

  The best practice is to copy one of the predefined menus, which is close to your needs and customize it.

  The beginning of the file sets the properties to display the menus. The display part is between the \<ul\> tags.


* {Rendering} items

  The default view for items in a menu is defined as the menuElement view.

  The rendering is applied on jmix:navMenuItem, it means the default JSP file used for rendering items will be :

  jahia/modules/default/jmix_navMenuItem/html/navMenuItem.menuElement.jsp

  If you want a custom display, you have to create a new view menuElement for your type definition. For example Jahia uses a custom view for jnt:page items. This choice will let you add properties such as icon (reference to a file) or alternate text for a menu item.

+----
 [jnt:navMenuText] > jnt:content, mix:title, jmix:navMenuItem
 + * (jmix:navMenuItem)
+----

  or

+----
[jnt:page] > nt:base, jmix:nodenameInfo, jmix:observable, jmix:basemetadata, mix:title, jmix:publication, jmix:tagged, jmix:navMenuItem, jmix:hasTemplateNode
 orderable
 - jcr:title (string) i18n mandatory
 - j:templateNode (weakreference,choicelist[templatesNode]) mandatory < jnt:template
 + * (nt:base) = nt:base version
 + * (jmix:navMenuItem)
+----

 + * (jmix:navMenuItem)  let you add sub menu items under your current menu.

  You can also define your own view for items. You must define a default view for it. This view will be available to be set in the jnt:navMenu from the studio.

  To define an available view, you have to define it in the property file of the view :
  The view property of jnt:navMenu is define as

+----
 - j:menuItemView (string,choicelist[templates='jmix:navMenuItem,menuItem',resourceBundle,image]) = menuElement
+----

  meaning that the type must me set as "menuElement". To do that, near the view, create a .properties file with the same name as the view and put in it :

+----
 type = menuItem
+----

   All items in the menu will use the same view.

* Define a new {action} item

  You can add you own action item in edit mode, on the contextual menu for the first tab of the side panel (like page, external node link, etc ...).

  The action is <<<org.jahia.ajax.gwt.client.widget.toolbar.action.NewContentActionItem>>>.

  The definition must have the mixin jmix:navMenuItem.

  In order to make it appear in the context menu, you have to define a new bean that describes your action.

  This is the structure of the bean you have to set :

+----
  <bean class="org.jahia.services.uicomponents.bean.toolbar.Item">
          <property name="actionItem">
              <bean class="org.jahia.ajax.gwt.client.widget.toolbar.action.NewContentActionItem">
                  <property name="nodeTypes" value="my:nodeType"/>
                  <property name="parentTypes" value="jnt:page"/>
              </bean>
          </property>
          <property name="titleKey" value="title"/>
          <property name="icon" value="image.png"/>
          <property name="parent" value="editmode.tabs[0].treeContextMenu"/>
         <property name="positionBefore" value="Toolbar.Item.Publish"/>
          <property name="visibility">
     <bean class="org.jahia.services.uicomponents.bean.Visibility">
      <property name="permission" value="permissionName"/>
     </bean>
    </property>
  </bean>
+----

 where

 nodeTypes : is your nodetype with the mixin jmix:navMenuItem

 parentTypes : is the node on witch the edit menu entry will appear

 titleKey : is the bundled resource key to be displayed

 icon : icon use for the menu entry

 parent : is the bean on witch this one will be injected (see applicationcontext-editmode.xml file for this structure)

 positionBefore : is the name of the bean before witch this menu entry will be positioned (positionAfter, position are available too)

 visibility : is the Visibility Bean that displays or not the entry
