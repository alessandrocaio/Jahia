Jahia Visibility Module

 The goal of the visibility framework is to allow you to add runtime condition to define if a node is visible or not.
 By default the only way to define if someone can see or not a node is by assigning specific rights to it. The
 visibility framework will add rules/conditions to ensure that a node is visible or not.

 Jahia will provide a default condition that can define the visibility of a node based on the current date. The node
 will be visible if the current date is after/between start date and after/(or before) end date.

 The conditions are checked every time we try to access the node, if a node is not visible nobody will see it in the live
 repository even in administration.

 The conditions will not be checked against when in the cache, so you will need to flush the cache when reaching a
 change of condition that will make a node visible or not. This way the conditions will be reevaluated.

* How to write your own conditions

  Conditions can be defined in any module, they are initialized through Spring framework. This way they have access to all services.
  To write your own condition simply implement the interface <<org.jahia.services.visiblity.VisibilityConditionRule>>.

+------------------------------------
/**
 * Defines a visibility condition for a piece of content in Jahia.
 */
public interface VisibilityConditionRule {

    /**
     * Returns <code>true</code> if the condition is satisfied and content will be rendered.
     *
     * @param node
     *            the node to test visibility condition for
     * @return <code>true</code> if the condition is satisfied and content will be rendered
     */
    boolean matches(JCRNodeWrapper node);

    /**
     * Return the node type associated with this condition.
     *
     * @return Return the node type associated with this condition.
     */
    String getAssociatedNodeType();

    /**
     * Return the associated display template that will be used by gwt.
     *
     * @return Return the associated display template that will be used by gwt.
     */
    String getGWTDisplayTemplate(Locale locale);
}
+------------------------------------

  Each condition should be associated with a node type that will provide a way for the end user to interact with it, by
  filling the associated auto generated form like we do for the workflow.

* Example of a condition

  Let us review the start/end date condition code.

+-----------------------------------
/**
 * This class handle the execution of a start/end date condition for checking a node visibility.
 * If the current date is after the start date or if start date is not defined then the node is visible unless
 * end date is defined and we are after end date.
 */
public class StartEndDateConditionRuleImpl implements VisibilityConditionRule {
    private transient static Logger logger = Logger.getLogger(StartEndDateConditionRuleImpl.class);
    private String associatedNodeType;
    private String displayTemplateKey;

    public void setAssociatedNodeType(String associatedNodeType) {
        this.associatedNodeType = associatedNodeType;
    }

    public String getAssociatedNodeType() {
        return associatedNodeType;
    }

    /**
     * Return the associated display template that will be used by gwt.
     *
     * @return Return the associated display template that will be used by gwt.
     */
    public String getGWTDisplayTemplate(Locale locale) {
        return JahiaResourceBundle.getString("JahiaVisibility", displayTemplateKey,locale, "Jahia Visibility");
    }

    public boolean matches(JCRNodeWrapper nodeWrapper) {
        Calendar start = null;
        Calendar end = null;
        try {
            start = nodeWrapper.getProperty("start").getValue().getDate();
        } catch (PathNotFoundException e) {
            logger.debug("start is not defined for this rule");
        } catch (RepositoryException e) {
            logger.error(e.getMessage(), e);
        }
        try {
            end = nodeWrapper.getProperty("end").getValue().getDate();
        } catch (PathNotFoundException e) {
            logger.debug("end is not defined for this rule");
        } catch (RepositoryException e) {
            logger.error(e.getMessage(), e);
        }
        Calendar calendar = null;
        try {
            calendar = nodeWrapper.getSession().getPreviewDate();
        } catch (RepositoryException e) {
        }
        if (calendar == null) {
            calendar = Calendar.getInstance();
        }
        if (start != null) {
            if (!calendar.after(start)) {
                return false;
            }
        }
        if (end != null) {
            if (!calendar.before(end)) {
                return false;
            }
        }
        return true;
    }

    public void setDisplayTemplateKey(String displayTemplateKey) {
        this.displayTemplateKey = displayTemplateKey;
    }

    public String getDisplayTemplateKey() {
        return displayTemplateKey;
    }
}
+-----------------------------------

  This condition is associated through Spring to this definition.

+-----------------------------------
[jnt:startEndDateCondition] > jnt:condition
 - start (date, datetimepicker)
 - end   (date, datetimepicker)
+----------------------------------

  Association in the Spring file of the module.

+----------------------------------
<bean class="org.jahia.modules.visibility.conditions.StartEndDateConditionRuleImpl">
  <property name="associatedNodeType" value="jnt:startEndDateCondition"/>
  <property name="requiredFieldNamesForTemplate">
    <list>
      <value>start</value>
      <value>end</value>
    </list>
  </property>
</bean>
+--------------------------------


* How do you handle multiple conditions on a node ?

  Multiple conditions are handle in a very simple way either you have to only match one condition to be visible or
  you have to match them all. To change the rule simply check/uncheck the conditional visibility checkbox in the engine.

* How to flush cache when conditions changed ?

  In this example we will use rules to launch Quartz jobs at the specified date (start and/or end) to flush the cache of
  the node having the condition and its parent also. The jobs are implemented using
  <<org.jahia.services.content.rules.BackgroundAction>>.

+----------------------------------
rule "Flush caches for start date visibility condition"
    salience 25
    when
        A property start has been set on a node
             - the node has the type jnt:startEndDateCondition
    then
        Execute the action "startDateVisibilityAction" at start on the node
end
+----------------------------------

 The code of the action itself

+----------------------------------
public abstract class DateVisibilityConditionBackgroundAction implements BackgroundAction {
    private transient static Logger logger = Logger.getLogger(DateVisibilityConditionBackgroundAction.class);
    private ModuleCacheProvider cacheProvider;

    public void setCacheProvider(ModuleCacheProvider cacheProvider) {
        this.cacheProvider = cacheProvider;
    }

    public void executeBackgroundAction(JCRNodeWrapper node) {
        try {
            cacheProvider.invalidate(node.getParent().getPath());
            cacheProvider.invalidate(node.getParent().getParent().getPath());
        } catch (RepositoryException e) {
            logger.error(e.getMessage(), e);
        }
    }
}


public class StartDateVisibilityConditionBackgroundActionImpl extends DateVisibilityConditionBackgroundAction {
    private transient static Logger logger = Logger.getLogger(StartDateVisibilityConditionBackgroundActionImpl.class);

    public String getName() {
        return "startDateVisibilityAction";
    }
}

public class EndDateVisibilityConditionBackgroundActionImpl extends DateVisibilityConditionBackgroundAction {
    private transient static Logger logger = Logger.getLogger(EndDateVisibilityConditionBackgroundActionImpl.class);

    public String getName() {
        return "endDateVisibilityAction";
    }
}
+----------------------------------

  <<A node can only have one job of the same name at he same time>>. The job name is determined by the action name,
  that is why we have one action for start and one for end to allow to have both jobs defined on the same condition.
